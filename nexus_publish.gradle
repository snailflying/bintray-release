if (!hasProperty("publishNexus")) {
    return
}
apply plugin:'maven'

//publishNexus 是否发版到Nexus仓库
//NEXUS_USERNAME 用户名
//NEXUS_PASSWORD 密码
//PUBLISH_RELEASE_REPOSITORY_URL release仓库url
//PUBLISH_SNAPSHOT_REPOSITORY_URL snapshot仓库url
//PUBLISH_ARTIFACT_ID = "bintray" 模块名称
//PUBLISH_GROUP_ID = "cn.theone" 组
//PUBLISH_VERSION_NAME = "1.1.5" 版本号
//PUBLISH_IS_RELEASE = true 是否上传release仓库
def getLocalProperties() {
    def localProperties = new Properties()
    InputStream inputStream = project.rootProject.file('local.properties').newDataInputStream()
    localProperties.load(inputStream)
    return localProperties
}

def getRepositoryUsername() {
    def localUser = localProperties.getProperty('NEXUS_USERNAME', "")
    return hasProperty('NEXUS_USERNAME') ? NEXUS_USERNAME : localUser
}
def getRepositoryPassword() {
    def localPassword = localProperties.getProperty('NEXUS_PASSWORD', "")
    return hasProperty('NEXUS_PASSWORD') ? NEXUS_PASSWORD : localPassword
}

def getPublishGroupId() {
    def localGroupId = localProperties.getProperty('PUBLISH_GROUP_ID', "cn.theone")
    return hasProperty('PUBLISH_GROUP_ID') ? PUBLISH_GROUP_ID : localGroupId
}
def getPublishArtifactId() {
    def localArtifactId = localProperties.getProperty('PUBLISH_ARTIFACT_ID', "")
    return hasProperty('PUBLISH_ARTIFACT_ID') ? PUBLISH_ARTIFACT_ID : localArtifactId
}
//PUBLISH_VERSION_NAME>Local PUBLISH_VERSION_NAME > Local VERSION_NAME > VERSION_NAME
def getPublishVersionName() {
    def temVersionName = hasProperty('VERSION_NAME') ? VERSION_NAME : "1.0.0"
    def localVersionName = localProperties.getProperty('VERSION_NAME', temVersionName)
    def localPublishVersionName = localProperties.getProperty('PUBLISH_VERSION_NAME', localVersionName)
    return hasProperty('PUBLISH_VERSION_NAME') ? PUBLISH_VERSION_NAME : localPublishVersionName
}

def getReleaseRepositoryUrl() {
    def localReleaseRepositoryUrl = localProperties.getProperty('PUBLISH_RELEASE_REPOSITORY_URL', "")
    return hasProperty('PUBLISH_RELEASE_REPOSITORY_URL') ? PUBLISH_RELEASE_REPOSITORY_URL : localReleaseRepositoryUrl
}
def getSnapshotRepositoryUrl() {
    def localSnapshotRepositoryUrl = localProperties.getProperty('PUBLISH_SNAPSHOT_REPOSITORY_URL', "")
    return hasProperty('PUBLISH_SNAPSHOT_REPOSITORY_URL') ? PUBLISH_SNAPSHOT_REPOSITORY_URL : localSnapshotRepositoryUrl
}
def isPublishRelease() {
    def localIsRelease = localProperties.getProperty('PUBLISH_IS_RELEASE', true)
    return hasProperty('PUBLISH_IS_RELEASE') ? PUBLISH_IS_RELEASE : localIsRelease
}

afterEvaluate { project ->
    uploadArchives {
        repositories {
            mavenDeployer {
                pom.artifactId = getPublishArtifactId()
                pom.groupId = getPublishGroupId()
                if (isPublishRelease()) {
                    pom.version = getPublishVersionName()
                } else {
                    pom.version = getPublishVersionName() + "-SNAPSHOT"
                }
                repository(url: getReleaseRepositoryUrl()) {
                    authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
                }
                snapshotRepository(url: getSnapshotRepositoryUrl()) {
                    authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
                }
            }
        }
    }
}